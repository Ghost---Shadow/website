"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[755],{5785:function(e,n,t){t.r(n),t.d(n,{default:function(){return r}});var a=t(2556),s=t.p+"static/media/system_prompt.40ceac6e0ec23fb1e97c.txt",o=t.p+"static/media/full_message_history.7c36a97f29177fc17c7d.png";function i(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",a:"a",pre:"pre",code:"code",ol:"ol",li:"li",h3:"h3",ul:"ul",em:"em"},e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{children:"How does AutoGPT work under the hood?"}),"\n",(0,a.jsx)("date",{children:"03 May 2023"}),"\n",(0,a.jsx)(n.h2,{children:"Introduction"}),"\n",(0,a.jsxs)(n.p,{children:["There are many youtube videos and blog posts about ",(0,a.jsx)(n.a,{href:"https://github.com/Significant-Gravitas/Auto-GPT",children:"AutoGPT"}),", but none of them peek under the hood and examine the code itself. So, I have gone through the code and I will provide a quick overview of how it works and some interesting parts of the code which I found to be unexpected. This is not meant to be a comprehensive code overview as that would be too long. I would only cover the fun parts."]}),"\n",(0,a.jsx)(n.h2,{children:"High level flow"}),"\n",(0,a.jsx)(n.p,{children:'When the application is started, the user is given a prompt to give the "AGI" a "purpose". Once it gets this objective it tries to make a plan and execute it.'}),"\n",(0,a.jsx)(n.p,{children:"Here is the high level flow"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-txt",children:'Jargon:\n\nFull message history = Entire "conversation" so far. We make it talk to itself.\nSystem prompt = Tells ChatGPT what tools it has and how it should respond  \nTriggering_prompt = the goal the user wants\nVector memory = long term memory embedded as embeddings\n'})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Call ChatGPT API with full message history + system prompt + triggering_prompt + vector memory"}),"\n",(0,a.jsx)(n.li,{children:"ChatGPT replies as JSON"}),"\n",(0,a.jsx)(n.li,{children:"Print the plan of action"}),"\n",(0,a.jsx)(n.li,{children:"The user can now approve the action, provide a critic, reject and terminate or prompt to do a self critic."}),"\n",(0,a.jsx)(n.li,{children:"If any feedback is provided then do not execute anything and go back to step 1 (this is a safety mechanism)"}),"\n",(0,a.jsx)(n.li,{children:"Execute the command which was planned, e.g. search web, write code"}),"\n",(0,a.jsx)(n.li,{children:'Append the result to the message history as "system"'}),"\n",(0,a.jsx)(n.li,{children:"Check for exit or go back to step 1"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{children:"System Prompt"}),"\n",(0,a.jsx)(n.p,{children:"The system prompt is a constant string is serves as a preamble to the chat message. It has the following parts."}),"\n",(0,a.jsxs)(n.p,{children:["I have dumped this string to a file and attached it ",(0,a.jsx)("a",{target:"_blank",rel:"noopener noreferrer",href:s,children:"here"})]}),"\n",(0,a.jsx)(n.p,{children:"While it is not part of the attached text document, the system time is also fed in."}),"\n",(0,a.jsx)(n.h3,{children:"Constraints, Resources and Performance Evaluation"}),"\n",(0,a.jsx)(n.p,{children:"The following string is provided as is to the chat model. I think this part is self-explanatory."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-txt",children:'Constraints:\n1. ~4000 word limit for short term memory. Your short term memory is short, so immediately save important information to files.\n2. If you are unsure how you previously did something or want to recall past events, thinking about similar events will help you remember.\n3. No user assistance\n4. Exclusively use the commands listed in double quotes e.g. "command name"\n\nResources:\n1. Internet access for searches and information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1. Continuously review and analyze your actions to ensure you are performing to the best of your abilities.\n2. Constructively self-criticize your big-picture behavior constantly.\n3. Reflect on past decisions and strategies to refine your approach.\n4. Every command has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps.\n5. Write all code to a file.\n'})}),"\n",(0,a.jsx)(n.h3,{children:"Commands"}),"\n",(0,a.jsx)(n.p,{children:"AugoGPT interacts with the world using commands, it can be anything ranging from making a web search to even creating sub agents."}),"\n",(0,a.jsxs)(n.p,{children:["ChatGPT responds with a command and arguments e.g. ",(0,a.jsx)(n.code,{children:'{"command": "write_to_file", "arguments": {"file_name":"foo.txt", "contents": "Hello world"}}'})]}),"\n",(0,a.jsx)(n.p,{children:"This response JSON is parsed and a python function associated with this command is invoked."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-txt",children:'Commands:\n1. analyze_code: Analyze Code, args: "code": "<full_code_string>"\n2. read_audio_from_file: Convert Audio to text, args: "filename": "<filename>"\n3. execute_python_file: Execute Python File, args: "filename": "<filename>"\n...\n21. Task Complete (Shutdown): "task_complete", args: "reason": "<reason>"\n'})}),"\n",(0,a.jsx)(n.p,{children:"Here are the categories"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'command_categories = [\n    "autogpt.commands.analyze_code",\n    "autogpt.commands.audio_text",\n    "autogpt.commands.execute_code",\n    "autogpt.commands.file_operations",\n    "autogpt.commands.git_operations",\n    "autogpt.commands.google_search",\n    "autogpt.commands.image_gen",\n    "autogpt.commands.improve_code",\n    "autogpt.commands.twitter",\n    "autogpt.commands.web_selenium",\n    "autogpt.commands.write_tests",\n    "autogpt.app",\n    "autogpt.commands.task_statuses",\n]\n'})}),"\n",(0,a.jsx)(n.p,{children:"Most commands are what you would expect, here are some weird ones"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Execute code command can run in docker container"}),"\n",(0,a.jsx)(n.li,{children:'"google" search uses duckduckgo'}),"\n",(0,a.jsx)(n.li,{children:'"google_official_search" uses google'}),"\n"]}),"\n",(0,a.jsx)(n.h3,{children:"Response format"}),"\n",(0,a.jsxs)(n.p,{children:["We ask ChatGPT to respond in a format that can be parsed by JSON parse. However, it does not always return a parseable JSON, so there are helper functions in code to parse ",(0,a.jsx)(n.em,{children:"almost"})," parseable JSONs."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-txt",children:'You should only respond in JSON format as described below \nResponse Format: \n{\n    "thoughts": {\n        "text": "thought",\n        "reasoning": "reasoning",\n        "plan": "- short bulleted\\n- list that conveys\\n- long-term plan",\n        "criticism": "constructive self-criticism",\n        "speak": "thoughts summary to say to user"\n    },\n    "command": {\n        "name": "command name",\n        "args": {\n            "arg name": "value"\n        }\n    }\n} \nEnsure the response can be parsed by Python json.loads\n'})}),"\n",(0,a.jsx)(n.p,{children:'Here is a sample JSON from the AutoGPT goal "make a successful twitter account"'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n    "thoughts": {\n        "text": "Now that we have a plan, let\'s optimize our profile and bio. We should start by updating our profile picture and header image to something eye-catching and relevant to our brand. We should also make sure our bio is clear, concise, and accurately reflects who we are and what we do. Finally, we should include relevant keywords and hashtags to make it easier for people to find us.",\n        "reasoning": "Optimizing our profile and bio is a crucial first step in building a successful Twitter account. It sets the tone for the type of content we will be sharing and helps attract the right audience. Updating our profile picture and header image will make our account more visually appealing and help us stand out. A clear and concise bio will help people understand who we are and what we do, while relevant keywords and hashtags will make it easier for people to find us.",\n        "plan": "- Update profile picture and header image\n                 - Write a clear and concise bio\n                 - Include relevant keywords and hashtags",\n        "criticism": "We need to make sure that our profile and bio accurately reflect who we are and what we do. We should avoid using buzzwords or exaggerating our accomplishments, as this can come across as insincere and turn people off.",\n        "speak": "Let\'s optimize our profile and bio. We should update our profile picture and header image to something eye-catching and relevant to our brand. We should also make sure our bio is clear, concise, and accurately reflects who we are and what we do. Finally, we should include relevant keywords and hashtags to make it easier for people to find us."\n    },\n    "command": {\n        "name": "write_to_file",\n        "args": {\n            "filename": "profile_optimization.txt",\n            "text": "- Update profile picture and header image\n                     - Write a clear and concise bio\n                     - Include relevant keywords and hashtags"\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{children:"Self feedback"}),"\n",(0,a.jsxs)(n.p,{children:["Self feedback is an optional step which you can turn on by pressing ",(0,a.jsx)(n.code,{children:"s"})," when the autogpt prompts you with ",(0,a.jsx)(n.code,{children:"y/n"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"AutoGPT takes the thoughts generated and sends it without any context to a fresh API call and asks for feedback."}),"\n",(0,a.jsx)(n.p,{children:"The feedback is then just appended to chat history."}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"feedback_thoughts"})," are thoughts from the response JSON above."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'feedback_prompt = f"Below is a message from me, an AI Agent, assuming the role of {ai_role}. whilst keeping knowledge of my slight limitations as an AI Agent Please evaluate my thought process, reasoning, and plan, and provide a concise paragraph outlining potential improvements. Consider adding or removing ideas that do not align with my role and explaining why, prioritizing thoughts based on their significance, or simply refining my overall thought process."\n\nadd_to_chat_history([\n    {"role": "user", "content": feedback_prompt + feedback_thoughts}\n])\n'})}),"\n",(0,a.jsx)(n.h2,{children:"Full message history"}),"\n",(0,a.jsx)(n.p,{children:"The full message history is the request payload sent to ChatGPT API. It looks like the picture given below."}),"\n",(0,a.jsx)("img",{src:o,alt:"full message history"}),"\n",(0,a.jsx)(n.h2,{children:"Vector memory summary"}),"\n",(0,a.jsx)(n.p,{children:"An increasingly popular way to get around context size limitations is using vector databases."}),"\n",(0,a.jsx)(n.p,{children:"For those who are not aware, a semantic embedding model (usually SBERT, but augogpt uses OpenAI ada model) to generate a vector for each thought."}),"\n",(0,a.jsx)(n.p,{children:"Semantically similar texts have a higher dot product than dissimilar texts."}),"\n",(0,a.jsx)(n.p,{children:"Here are the steps for using vector databases as a long term memory"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Query the vector database with the embedding of current thought"}),"\n",(0,a.jsx)(n.li,{children:"Get top 5 most similar thoughts"}),"\n",(0,a.jsx)(n.li,{children:"Make a fresh API call to summarize the 5 thoughts into a smaller text"}),"\n",(0,a.jsx)(n.li,{children:"Feed the summary along with other things."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{children:"Running summary"}),"\n",(0,a.jsx)(n.p,{children:"Running summary is also used to keep track of the actions done so far."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Initial memory necessary to avoid hallucination\nself.summary_memory = "I was created."\n\nnew_events = [\n    {"event": "entered the kitchen."}, \n    {"event": "found a scrawled note with the number 7"}\n]\nupdate_running_summary(new_events)\n# Returns: "This reminds you of these events from your past: \\nI entered the kitchen and found a scrawled note saying 7."\n'})}),"\n",(0,a.jsx)(n.h2,{children:"Budget notifications"}),"\n",(0,a.jsx)(n.p,{children:"AutoGPT also tells the ChatGPT model to hurry up and wrap things up to keep things within a budget."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'system_message = (\n    f"Your remaining API budget is ${remaining_budget:.3f}"\n    + (\n        " BUDGET EXCEEDED! SHUT DOWN!\\n\\n"\n        if remaining_budget == 0\n        else " Budget very nearly exceeded! Shut down gracefully!\\n\\n"\n        if remaining_budget < 0.005\n        else " Budget nearly exceeded. Finish up.\\n\\n"\n        if remaining_budget < 0.01\n        else "\\n\\n"\n    )\n)\n'})}),"\n",(0,a.jsx)(n.h2,{children:"Sub agents"}),"\n",(0,a.jsx)(n.p,{children:"AutoGPT can spawn named sub-agents who have a fresh context and an assigned goal. This seems to be another strategy to get around the problem of limited context size."}),"\n",(0,a.jsx)(n.p,{children:"At time of writing this blog, the agents are not on a subprocess but a synchronized function call. Communication is done in natural language string and is in practice similar to a function call. An agent is called with argument and it returns with results. Each agent maintains its own chat history."}),"\n",(0,a.jsx)(n.p,{children:"Deciding when to create, list, message and terminate is done using commands discussed above."}),"\n",(0,a.jsx)(n.h2,{children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"As of writing the AutoGPT codebase is still under active development and surely there will be more features added in future."}),"\n",(0,a.jsx)(n.p,{children:"Infact I plan to rewrite this blog post with AutoGPT. Just sick it on the codebase and create a writeup. It would be interesting to see what things it comes up which I might have missed."}),"\n",(0,a.jsx)(n.p,{children:"What a time to be alive!"})]})}var r=function(e={}){const{wrapper:n}=e.components||{};return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=755.4f14ec3d.chunk.js.map